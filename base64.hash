a2ps
aarch64-elf-binutils
aarch64-elf-gcc
abcm2ps
abook
adios2
advancemame
aerc
agda
aircrack-ng
airspy
algol68g
allureofthestars
alpine
amtk
analog
angband
anjuta
antiword
apcupsd
appium
apr-util
apt-dater
aqbanking
aravis
arm-linux-gnueabihf-binutils
arp-scan
arpack
arx-libertatis
asn1c
aspcud
aspell
asymptote
atf
atomist-cli
audacious
augeas
augustus
autogen
avanor
avrdude
babl
bacula-fd
balena-cli
baobab
baresip
bash
bastet
bcftools
bcoin
bear
bib-tool
bibclean
bind
binutils
bison@2.7
bit
bitchx
bitlbee
blast
bochs
boost-mpi
botan
boxes
bsdconv
bsdmake
buildapp
burp
bvi
cabocha
cadaver
cafeobj
cairo
calc
calcurse
camlp5
capnp
cattle
cc65
ccls
ccrypt
cdogs-sdl
cdrdao
cdrtools
center-im
cfengine
cgdb
cgit
chapel
cherrytree
chibi-scheme
chicken
clamav
claws-mail
cling
clutter
clutter-gst
clutter-gtk
cmu-pocketsphinx
cmus
cntlm
cogl
collectd
coq
coreutils
corsixth
coturn
cpmtools
cppcheck
crystal
crystal-icr
csound
ctl
cubelib
cups
cutter
cweb
cyrus-sasl
dar
dartsim
dateutils
dbus
dbxml
dcmtk
desktop-file-utils
detox
devtodo
dex
dfc
dict
diction
distcc
djbdns
djvulibre
dmagnetic
dnsdist
dnsmasq
dopewars
dovecot
dpkg
dsh
dungeon
duo_unix
dwarfutils
dwatch
dwdiff
e2fsprogs
easy-tag
ecasound
eccodes
ecflow-ui
ecl
efl
eg
ekg2
elektra
elinks
emacs
enca
enchant
enigma
enscript
epic5
espeak
etsh
ettercap
evince
ex-vi
exact-image
exim
expect
exult
fairymax
fdclone
feh
ffmpeg
ffmpeg@2.8
ffmpeg@4
fheroes2
fig2dev
figlet
file-roller
firebase-cli
fizmo
flex
flow-tools
fltk
fluent-bit
fontconfig
fontforge
fortune
fourstore
fplll
fragroute
freeciv
freedink
freeipmi
freeradius-server
freerdp
freeswitch
freetds
frobtads
frotz
fuego
fuse-emulator
fwknop
gambit-scheme
gammu
gatsby-cli
gauche
gawk
gcab
gcc
gdal
gdcm
gdk-pixbuf
gdl
gdmap
gedit
gegl
geoipupdate
gerbil-scheme
gerbv
gettext
gforth
ghex
ghostscript
git
gitg
gjs
gkrellm
glade
glib
glib-networking
glib-openssl
global
gmime
gmt
gnome-latex
gnome-recipes
gnu-apl
gnu-chess
gnu-cobol
gnu-indent
gnu-shogi
gnu-typist
gnu-units
gnumeric
gnupg
gnupg@1.4
gnupg@2.2
gnuplot
gnuplot@4
gnutls
go
go-boring
goaccess
gobject-introspection
goffice
goocanvas
goplus
gource
gpa
gphoto2
gpredict
gputils
gqview
grace
grap
graph-tool
graphicsmagick
graphql-cli
graphviz
groff
gromacs
groonga
grsync
gsmartcontrol
gsoap
gspell
gst-devtools
gst-plugins-bad
gst-plugins-base
gst-plugins-good
gst-plugins-ugly
gst-python
gstreamer
gtk-gnutella
gtk-mac-integration
gtk-vnc
gtk4
gtk+
gtk+3
gtksourceview
gtksourceview3
gtksourceview4
gtksourceview5
gtkspell3
gtmess
gtranslator
gucharmap
guile
guile@2
gupnp-av
gupnp-tools
gwenhywfar
gwyddion
gxml
h2o
hashcat
hbase
heimdal
hercules
herrie
hevea
highlight
homebank
hsd
hspell
htmlcxx
htmldoc
httpd
httrack
i386-elf-gdb
i686-elf-binutils
i686-elf-gcc
icarus-verilog
icecream
idutils
ike-scan
imagemagick
imagemagick@6
imake
imapfilter
imlib2
inadyn
inetutils
inspircd
instead
ipsumdump
ircd-hybrid
ircd-irc2
ircii
irssi
isc-dhcp
ispell
itk
jack
jailkit
jed
jigdo
jimtcl
jnethack
jobber
joe
john
john-jumbo
joplin-cli
jove
json-glib
juise
juman
jumanpp
kcov
ki18n
klavaro
knot
knot-resolver
kore
krb5
ktoblzcheck
kyoto-cabinet
kyoto-tycoon
kytea
kyua
laszip
latex2rtf
lcdf-typetools
lci
lcs
ldc
le
lensfun
lesstif
lftp
libadwaita
libao
libbitcoin-explorer
libbitcoin-node
libbitcoin-server
libcapn
libchewing
libcouchbase
libcouchbase@2
libdap
libdazzle
libdsk
libetonyek
libexif
libextractor
libfixbuf
libgccjit
libgda
libglade
libgpg-error
libgphoto2
libgr
libgsf
libgtop
libgusb
libgweather
libhandy
libidn2
libiptcdata
liblockfile
liblouis
liblunar
libmagic
libmp3splt
libnfc
libofx
liboping
libosinfo
libpeas
libpq
libprelude
libproxy
libqalculate
libquicktime
libquvi
libressl
librest
librsvg
librsync
libsigrok
libsigrokdecode
libslax
libsmi
libsoup
libsoup@2
libvdpau
libvirt
libvirt-glib
libwebsockets
libwmf
libx11
libxaw
libxkbcommon
libxo
lifelines
lighttpd
lilypond
link-grammar
lldpd
log4c
logstalgia
lout
lv
lynx
macvim
madplay
mailcatcher
mailutils
make
man-db
manticoresearch
mariadb
mariadb-connector-c
mariadb@10.2
mariadb@10.3
mariadb@10.4
mariadb@10.5
mariadb@10.6
mcabber
mdk
mecab
mecab-ko
mednafen
mercurial
mesa
midgard2
midnight-commander
mikmod
mimic
mingw-w64
minicom
minimal-racket
minipro
mlt
moarvm
moc
modules
moe
mold
monetdb
mongosh
moon-buggy
mosml
mosquitto
mozjpeg
mp3blaster
mp3splt
mpage
mpdas
mpdscribble
mpg123
mpg321
mpop
mpv
msc-generator
msitools
msmtp
mspdebug
mutt
myman
mysql
mysql-client
mysql-client@5.7
mysql@5.7
nagios
nano
ncftp
ncrack
ncurses
ncview
ne
neko
neomutt
neovim
nest
nestopia-ue
net-snmp
netcat6
netdata
nethack
nethacked
netpbm
newlisp
newsboat
nghttp2
nginx
ngspice
nmap
nmh
notcurses
nqp
nsd
nsuds
ntopng
nudoku
nut
nvc
nvi
oath-toolkit
objfw
ocaml-findlib
ocamlbuild
ocp
octave
octomap
oil
ola
omake
omega
open-babel
open-mpi
open-ocd
open-scene-graph
open-tyrian
open-zwave
openalpr
opencbm
opencc
openconnect
opencv
opencv@2
opencv@3
opendbx
openfortivpn
openldap
openmotif
opensc
openssh
openssl@1.1
openssl@3
opensubdiv
openvpn
orbit
osinfo-db-tools
osm-gps-map
osm2pgsql
otf2
p0f
p11-kit
packmol
pacman4console
parrot
pcb
pdal
pdf2djvu
pdf2htmlex
pdf2image
pdfpc
pdns
pdnsd
pdnsrec
pdsh
percona-server
percona-xtrabackup
perl
perl@5.18
petsc
petsc-complex
pev
pgpool-ii
php
php@7.2
php@7.4
php@8.0
pianod
pidgin
pike
pinfo
pioneer
pioneers
pkg-config
pkgconf
ploticus
plplot
pnetcdf
polipo
polyml
poppler
poppler-qt5
postgresql
postgresql@10
postgresql@11
postgresql@12
postgresql@13
postgresql@9.5
postgresql@9.6
povray
powerman
ppl
prefixsuffix
profanity
proftpd
proj
proj@7
projectm
proxychains-ng
pstoedit
pulseaudio
python@3.10
python@3.8
python@3.9
qalculate-gtk
qdae
qemu
qjackctl
qmmp
qrupdate
qstat
quickjs
qwtpolar
r
radare2
rakudo
rakudo-star
rarian
rats
rdesktop
re2c
reaver
redland
redshift
regina-rexx
remake
reprepro
rhash
rizin
rlwrap
rmw
robodoc
robotfindskitten
ronn
root
roswell
rpki-client
rpm
rrdtool
rssh
rsyslog
rtf2latex2e
ruby
ruby@2.4
ruby@2.5
ruby@2.6
ruby@2.7
ruby@3.0
rush
rxvt-unicode
s-lang
s-nail
s6
samba
sane-backends
sc-im
sc68
scalapack
scheme48
scrcpy
screen
scrollkeeper
scry
scummvm
sdcc
sdcv
sextractor
shairport-sync
shibboleth-sp
siege
silk
simgrid
simple-scan
singular
siril
sispmctl
skopeo
slrn
smake
smartmontools
sng
snobol4
snownews
snowpack
sntop
soci
softhsm
solargraph
source-highlight
sphinx
spice-gtk
spim
splint
squid
sstp-client
standardese
stone-soup
strongswan
stubby
subversion
suil
supermodel
suricata
swftools
swi-prolog
swig
swig@3
sword
sylpheed
synfig
sysdig
sz81
t1lib
takt
task
tcl-tk
tcsh
teem
telegram-cli
tepl
texinfo
texlive
tgif
timidity
tin
tiny-fugue
tinyproxy
toilet
tokyo-cabinet
tor
torsocks
tracker
trader
trafficserver
transmission-cli
treefrog
ttyd
typespeed
uade
ucommon
ucon64
udunits
ufraw
ugrep
uhd
unbound
unixodbc
unnethack
unrtf
util-linux
uuu
uwsgi
vala
varnish
vde
verilator
vice
vifm
vim
vimpc
vips
vis
vnstat
volk
vsftpd
vte3
vtk
vtk@8.2
w3m
wdiff
webalizer
webtorrent-cli
weechat
wget
widelands
wimlib
wireshark
wirouter_keyrec
wordnet
wordplay
wv
wxmaxima
wy60
x3270
x86_64-elf-binutils
x86_64-elf-gcc
x86_64-elf-gdb
xaric
xboard
xfig
xmrig
xrick
xsane
xsw
xterm
yash
yaze-ag
yosys
zabbix
zbar
zebra
zeek
zenity
zile
zmap
znc
zorba
zork
zsh
zxcc
zzuf
